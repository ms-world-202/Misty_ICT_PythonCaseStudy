# -*- coding: utf-8 -*-
"""IntermediateAssignment-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GlAU_WQZRGrs7pm_A6j2KnS9TZu59f0t
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import f1_score, accuracy_score
data = pd.read_csv('/content/train_LZdllcl.csv')
test_data = pd.read_csv('/content/test_2umaH9m.csv')

#fill missing values
mode_education = data['education'].mode()[0]
data['education'].fillna(mode_education, inplace=True)
mean_rating = data['previous_year_rating'].mean()
data['previous_year_rating'].fillna(mean_rating, inplace=True)
train_data_encoded = pd.get_dummies(data, columns=['department', 'region', 'education', 'gender', 'recruitment_channel'], drop_first=True)

X = train_data_encoded.drop(['employee_id', 'is_promoted'], axis=1)
y = train_data_encoded['is_promoted']

# from sklearn.model_selection import train_test_split

# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=42)

# One-hot encoding for categorical variables in the testing dataset
test_data_encoded = pd.get_dummies(test_data, columns=['department', 'region', 'education', 'gender', 'recruitment_channel'], drop_first=True)

# Align the columns
test_data_encoded = test_data_encoded.reindex(columns=X_train.columns, fill_value=0)

test_data_encoded['employee_id'] = test_data['employee_id']
# Train the Model
model = RandomForestClassifier(random_state=42)
model.fit(X, y)

# Make Predictions
X_test = test_data_encoded.drop(['employee_id'], axis=1)  # Drop 'employee_id' for predictions
predictions = model.predict(X_test)

# Save Predictions
output = pd.DataFrame({'employee_id': test_data_encoded['employee_id'], 'is_promoted': predictions})
output.to_csv('predictions.csv', index=False)

print("Predictions saved to 'predictions.csv'.")